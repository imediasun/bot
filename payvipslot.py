from aiogram import types
from aiogram.dispatcher import FSMContext

from hendlers import cb_check_ban_user, set_new_click
from main import dp, bot
from config import admin_pay_slot, admin_get_cap_chat
from database import *
from keyboards import *
from states import BuyVipSlotStatesGroup
from translations import _
from youngkb import main_young_menu_ikb, info_from_bd, back_vip_prac_ikb


@dp.callback_query_handler(tour_cb.filter(action='send_check_vip_slot'))
async def cb_send_check_vip_slot(callback : types.CallbackQuery, callback_data : dict, state : FSMContext):
    await send_check_vip_part1(callback, callback_data, state)
    await callback.answer()


@dp.callback_query_handler(tour_cb.filter(action='change_check_vip_slot'))
async def cb_change_check_vip_slot(callback : types.CallbackQuery, callback_data : dict, state : FSMContext):
    await send_check_vip_part1(callback, callback_data, state)
    await callback.message.delete()
    await callback.answer()


async def send_check_vip_part1(callback, callback_data, state):
    user_id = callback.from_user.id
    lang = await get_user_lang(user_id)
    ban = await cb_check_ban_user(callback)
    if not ban:
        await set_new_click(user_id)
        check = await get_check_vip_slot(callback_data['id'])
        for data in check:
            if data[10] == "prac":
                amount_slots = await get_amount_vip_prac(data[9])
                kb = back_vip_prac_ikb(lang)
                await send_check_vip_part2(amount_slots, callback, state, kb, callback_data, lang)
            elif data[10] == 'event':
                amount_slots = await get_amount_events(data[9])
                kb = back_pro_main(lang)
                await send_check_vip_part2(amount_slots, callback, state, kb, callback_data, lang)
            elif data[10] == 'vip_slot':
                amount_slots = await get_amount_vip_slot_time(data[9], data[17])
                kb = back_vip_slot_main_ikb(lang)
                await send_check_vip_part2(amount_slots, callback, state, kb, callback_data, lang)

async def send_check_vip_part2(amount_slots, callback, state, kb, callback_data, lang):
    if amount_slots == 0:
        await callback.message.answer(f"{_('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å–ª–æ—Ç–æ–≤ –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å!', lang)}\n"
                                      f"\n"
                                      f"{_('–ï—Å–ª–∏ –≤—ã —É–∂–µ —Å–æ–≤–µ—Ä—à–∏–ª–∏ –æ–ø–ª–∞—Ç—É, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Ç–∞–∫–æ–π –∂–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—É–¥–∞ —á–µ–∫ –∏–ª–∏ –∂–µ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ üí¨–ü–æ–¥–µ—Ä–∂–∫—É –∑–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤!ü§ó', lang)}",
                                      reply_markup=kb)
    else:
        async with state.proxy() as data:
            data['check_id'] = callback_data['id']
        await callback.message.answer(_("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫:", lang),
                                      reply_markup=cancel_kb(lang))
        await BuyVipSlotStatesGroup.proof.set()


@dp.callback_query_handler(tour_cb.filter(action='confirm_buy_vip_slot'))
async def cb_confirm_buy_vip_slot(callback : types.CallbackQuery, callback_data : dict):
    lang = await get_user_lang(callback.from_user.id)
    await callback.message.answer(_("–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞!", lang),
                                  reply_markup=ReplyKeyboardRemove())
    check = await get_check_vip_slot(callback_data['id'])
    await set_new_click(callback.from_user.id)
    for data in check:
        if data[10] == "event":
            tour_name = await get_event_name(data[9])
            desc_tour = await get_desc_event(data[9])
            price = await get_price_event(data[9])
            amount_slots = await get_amount_events(data[9])
            remaining_slots = amount_slots - 1
            await update_amount_event(data[9], remaining_slots)
        elif data[10] == 'prac':
            tour_name = await get_vip_prac_name(data[9])
            desc_tour = await get_desc_prac_vip(data[9])
            price = await get_price_vip_prac(data[9])
            amount_slots = await get_amount_vip_prac(data[9])
            remaining_slots = amount_slots - 1
            await update_amount_vip_prac(data[9], remaining_slots)
        else:
            tour_name = await get_name_tour_vip_slot(data[9])
            desc_tour = await get_desc_vip_slot(data[9])
            price = await get_price_vip_slot(data[9])
            amount_slots = await get_amount_vip_slot_time(data[9], data[17])
            remaining_slots = amount_slots - 1
            await update_amount_vip_slot(data[9], data[17], remaining_slots)
        if not data[3]:
            await bot.send_document(chat_id=admin_pay_slot,
                                    document=data[4],
                                    caption=f"–û–ø–ª–∞—Ç–∞ ‚Ññ{data[8]}\n"
                                            f"\n"
                                            f"{tour_name}\n"
                                            f"\n"
                                            f"{desc_tour}\n"
                                            f"TIME: {data[17]}:00\n"
                                            f"\n"
                                            f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª–æ—Ç–∞: {price}\n"
                                            f"\n"
                                            f"–û–ø–ª–∞—Ç–∞ –Ω–∞ —Å—É–º–º—É: {data[5]} {data[6]}\n"
                                            f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {data[7]}\n"
                                            f"\n"
                                            f"ID: {data[1]}\n"
                                            f"USERNAME: {data[2]}",
                                    reply_markup=admin_check_pay_vip_slot(data[0]))
        else:
            await bot.send_photo(chat_id=admin_pay_slot,
                                 photo=data[3],
                                 caption=f"–û–ø–ª–∞—Ç–∞ ‚Ññ{data[8]}\n"
                                         f"\n"
                                         f"{tour_name}\n"
                                         f"\n"
                                         f"{desc_tour}\n"
                                         f"TIME: {data[17]}:00\n"
                                         f"\n"
                                         f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª–æ—Ç–∞: {price}\n"
                                         f"\n"
                                         f"–û–ø–ª–∞—Ç–∞ –Ω–∞ —Å—É–º–º—É: {data[5]} {data[6]}\n"
                                         f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {data[7]}\n"
                                         f"\n"
                                         f"ID: {data[1]}\n"
                                         f"USERNAME: {data[2]}",
                                 reply_markup=admin_check_pay_vip_slot(data[0]))
    await callback.message.delete()
    await callback.answer()


@dp.callback_query_handler(tour_cb.filter(action='send_info_for_vip_slot'))
async def cb_send_info_for_vip_slot(callback : types.CallbackQuery, callback_data : dict, state : FSMContext):
    lang = await get_user_lang(callback.from_user.id)
    await callback.message.answer(_("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:", lang))
    await set_new_click(callback.from_user.id)
    async with state.proxy() as data:
        data['check_id'] = callback_data['id']
    await BuyVipSlotStatesGroup.team_name.set()
    await callback.message.delete()
    await callback.answer()


@dp.callback_query_handler(tour_cb.filter(action='change_info_vip_slot'))
async def cb_change_info_vip_slot(callback : types.CallbackQuery, callback_data : dict, state : FSMContext):
    lang = await get_user_lang(callback.from_user.id)
    await set_new_click(callback.from_user.id)
    await callback.message.answer(_("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:", lang))
    async with state.proxy() as data:
        data['check_id'] = callback_data['id']
    await BuyVipSlotStatesGroup.team_name.set()
    await callback.message.delete()
    await callback.answer()


@dp.callback_query_handler(tour_cb.filter(action='confirm_info_vip_slot'))
async def cb_confirm_info_vip_slot(callback : types.CallbackQuery, callback_data : dict):
    await callback.message.delete()
    lang = await get_user_lang(callback.from_user.id)
    check = await get_check_vip_slot(callback_data['id'])
    profile = await get_profile(callback.from_user.id)
    await set_new_click(callback.from_user.id)
    if profile == 'pro':
        await callback.message.answer(f"{_('–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É!', lang)}\n"
                                      f"{_('–°–ª–æ—Ç –≤—ã–¥–∞–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 20 –º–∏–Ω—É—Ç(–µ—Å–ª–∏ –ø–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ —á–∞—Å –¥–æ –Ω–∞—á–∞–ª–∞, —Å–ª–æ—Ç –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ).', lang)}",
                                      reply_markup=main_menu_kb(lang))
    elif profile == 'young':
        await callback.message.answer(f"{_('–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É!', lang)}\n"
                                      f"{_('–°–ª–æ—Ç –≤—ã–¥–∞–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 20 –º–∏–Ω—É—Ç(–µ—Å–ª–∏ –ø–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ —á–∞—Å –¥–æ –Ω–∞—á–∞–ª–∞, —Å–ª–æ—Ç –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ).', lang)}",
                                      reply_markup=main_young_menu_ikb(lang))
    for data in check:
        if data[10] == "event":
            tour_name = await get_event_name(data[9])
            desc = await get_desc_event(data[9])
        elif data[10] == 'prac':
            tour_name = await get_vip_prac_name(data[9])
            desc = await get_desc_prac_vip(data[9])
        else:
            tour_name = await get_name_tour_vip_slot(data[9])
            desc = await get_desc_vip_slot(data[9])
        if not data[11] and not data[12]:
            await bot.send_message(chat_id=admin_get_cap_chat,
                                   text=f"–ó–∞–∫–∞–∑ ‚Ññ{data[8]}\n"
                                        f"\n"
                                        f"{tour_name}\n"
                                        f"\n"
                                        f"{desc}\n"
                                        f"TIME: {data[17]}:00\n"
                                        f"\n"
                                        f"{data[13]} | {data[14]} | {data[15]}\n"
                                        f"\n"
                                        f"USERNAME: {data[2]}",
                                   reply_markup=admin_get_cap_chat_ikb(data[0]))
        elif not data[11]:
            await bot.send_document(chat_id=admin_get_cap_chat,
                                    document=data[12],
                                    caption=f"–ó–∞–∫–∞–∑ ‚Ññ{data[8]}\n"
                                            f"\n"
                                            f"{tour_name}\n"
                                            f"\n"
                                            f"{desc}\n"
                                            f"TIME: {data[17]}:00\n"                                    
                                            f"\n"
                                            f"{data[13]} | {data[14]} | {data[15]}\n"
                                            f"\n"
                                            f"USERNAME: {data[2]}",
                                    reply_markup=admin_get_cap_chat_ikb(data[0]))
        elif not data[12]:
            await bot.send_photo(chat_id=admin_get_cap_chat,
                                 photo=data[11],
                                 caption=f"–ó–∞–∫–∞–∑ ‚Ññ{data[8]}\n"
                                         f"\n"
                                         f"{tour_name}\n"
                                         f"\n"
                                         f"{desc}\n"
                                         f"TIME: {data[17]}:00\n"
                                         f"\n"
                                         f"{data[13]} | {data[14]} | {data[15]}\n"
                                         f"\n"
                                         f"USERNAME: {data[2]}",
                                 reply_markup=admin_get_cap_chat_ikb(data[0]))

    await callback.answer()


# LOAD INFO FOR VIP SLOT/EVENT/PRAC
@dp.message_handler(content_types=['photo', 'document', 'text'], state=BuyVipSlotStatesGroup.proof)
async def load_proof_vip_slot(message: types.Message, state: FSMContext):
    lang = await get_user_lang(message.from_user.id)
    profile = await get_profile(message.from_user.id)
    if message.text == f'‚ùå{_("–û—Ç–º–µ–Ω–∏—Ç—å", lang)}':
        await set_new_click(message.from_user.id)
        if profile == 'young':
            await message.answer(_("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", lang),
                                 reply_markup=main_young_menu_ikb(lang))
        elif profile == 'pro':
            await message.answer(_("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", lang),
                                 reply_markup=main_menu_kb(lang))
        await state.finish()
    elif message.content_type == 'photo':
        async with state.proxy() as data:
            data['proof'] = message.photo[0].file_id
        await update_pay_proof_vip_slot(data['proof'], data['check_id'])
        await message.answer_photo(photo=data['proof'],
                                   caption=_("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂:", lang),
                                   reply_markup=confirm_buy_vip_slot(data['check_id'], lang))
        await state.finish()
    elif message.content_type == 'document':
        async with state.proxy() as data:
            data['proof'] = message.photo[0].file_id
        await update_pay_proof_d_vip_slot(data['proof'], data['check_id'])
        await message.answer_document(document=data['proof'],
                                      caption=_("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂:", lang),
                                      reply_markup=confirm_buy_vip_slot(data['check_id'], lang))
        await state.finish()
    else:
        await message.answer(_("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º/—Ñ–∞–π–ª–æ–º!", lang))


@dp.message_handler(lambda message : len(message.text) > 30, state=BuyVipSlotStatesGroup.team_name)
async def check_team_name_vip_slot(message : types.Message):
    lang = await get_user_lang(message.from_user.id)
    await message.answer(_("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –¥–æ–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 30 —Å–∏–º–≤–æ–ª–æ–≤!", lang))

@dp.message_handler(state=BuyVipSlotStatesGroup.team_name)
async def load_team_name(message: types.Message, state: FSMContext):
    lang = await get_user_lang(message.from_user.id)
    async with state.proxy() as data:
        data['team_name'] = message.text
    await message.answer(_("–£–∫–∞–∂–∏—Ç–µ —Ç–µ–≥ –∫–æ–º–∞–Ω–¥—ã:", lang))
    await BuyVipSlotStatesGroup.next()


@dp.message_handler(lambda message : len(message.text) > 20, state=BuyVipSlotStatesGroup.team_tag)
async def check_team_name_vip_slot(message : types.Message):
    lang = await get_user_lang(message.from_user.id)
    await message.answer(_("–¢–µ–≥ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –¥–æ–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤!", lang))

@dp.message_handler(state=BuyVipSlotStatesGroup.team_tag)
async def load_team_tag(message: types.Message, state: FSMContext):
    lang = await get_user_lang(message.from_user.id)
    async with state.proxy() as data:
        data['team_tag'] = message.text
    await message.answer(_("–û—Ç–ø—Ä–∞–≤—å—Ç–µ Discord/Telegram –Ω–∏–∫ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–µ–ø —á–∞—Ç—É:", lang))
    await BuyVipSlotStatesGroup.next()


@dp.message_handler(lambda message : len(message.text) > 20, state=BuyVipSlotStatesGroup.cap)
async def check_team_name_vip_slot(message : types.Message):
    lang = await get_user_lang(message.from_user.id)
    await message.answer(_("Discord/Telegram –Ω–∏–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤", lang))

@dp.message_handler(state=BuyVipSlotStatesGroup.cap)
async def load_cap(message: types.Message, state: FSMContext):
    lang = await get_user_lang(message.from_user.id)
    async with state.proxy() as data:
        data['cap'] = message.text
    await message.answer(_("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–≥–æ—Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã(—Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª):", lang),
                         reply_markup=info_from_bd(_("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", lang)))
    await BuyVipSlotStatesGroup.next()


@dp.message_handler(content_types=['document', 'photo', 'text'], state=BuyVipSlotStatesGroup.logo)
async def load_logo(message: types.Message, state: FSMContext):
    lang = await get_user_lang(message.from_user.id)
    async with state.proxy() as data:
        if message.content_type == 'photo':
            data['logo'] = message.photo[0].file_id
        elif message.content_type == 'document':
            data['logo'] = message.document.file_id
    if message.text == _("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", lang):
        await message.answer(f"Team name: {data['team_name']}\n"
                             f"Tag: {data['team_tag']}\n"
                             f"\n"
                             f"Discord/Telegram nickname: {data['cap']}",
                             reply_markup=ReplyKeyboardRemove())
        await message.answer(_("–í—Å–µ –≤–µ—Ä–Ω–æ?", lang),
                             reply_markup=confirm_info_pay_vip_slot_ikb(data['check_id'], lang))
        await update_text_info_vip_slot(state)
        await state.finish()
    elif message.content_type == 'photo':
        await update_info_for_vip_slot(state)
        await message.answer_photo(photo=data['logo'],
                                   caption=f"Team name: {data['team_name']}\n"
                                           f"Tag: {data['team_tag']}\n"
                                           f"\n"
                                           f"Discord/Telegram nickname: {data['cap']}",
                                   reply_markup=ReplyKeyboardRemove())
        await message.answer(_("–í—Å–µ –≤–µ—Ä–Ω–æ?", lang),
                             reply_markup=confirm_info_pay_vip_slot_ikb(data['check_id'], lang))

        await state.finish()
    elif message.content_type == 'document':
        await update_info_d_for_vip_slot(state)
        await message.answer_document(document=data['logo'],
                                      caption=f"Team name: {data['team_name']}\n"
                                              f"Tag: {data['team_tag']}\n"
                                              f"\n"
                                              f"Discord/Telegram nickname: {data['cap']}",
                                      reply_markup=ReplyKeyboardRemove())
        await message.answer(_("–í—Å–µ –≤–µ—Ä–Ω–æ?", lang),
                             reply_markup=confirm_info_pay_vip_slot_ikb(data['check_id'], lang))

        await state.finish()
    else:
        await message.answer(_("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–≥–æ—Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã —Ñ–∞–π–ª–æ–º –∏–ª–∏ —Ñ–æ—Ç–æ!", lang))


@dp.message_handler(state=BuyVipSlotStatesGroup.reason)
async def load_reason_vip_slot(message : types.Message, state : FSMContext):
    async with state.proxy() as data:
        data['reason'] = message.text
    await update_reason_vip_slot(state)
    check = await get_check_vip_slot(data['check_id'])
    for data in check:
        if data[10] == "event":
            tour_name = await get_event_name(data[9])
            desc_tour = await get_desc_event(data[9])
        else:
            tour_name = await get_name_tour_vip_slot(data[9])
            desc_tour = await get_desc_vip_slot(data[9])
        await bot.send_message(chat_id=message.from_user.id,
                               text=f"‚ùå–ó–∞–∫–∞–∑ ‚Ññ{data[8]} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n"
                                    f"\n"
                                    f"–ü—Ä–∏—á–∏–Ω–∞: {data[16]}\n"
                                    f"\n"
                                    f"{tour_name}\n"
                                    f"\n"
                                    f"{desc_tour}\n"
                                    f"TIME: {data[17]}\n"
                                    f"\n"
                                    f"{data[13]} | {data[14]} | {data[15]}\n"
                                    f"\n"
                                    f"USERNAME: {data[2]}",
                               reply_markup=admin_conf_reason_vip_ikb(data[0]))
    await state.finish()