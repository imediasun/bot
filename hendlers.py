from urllib.parse import urlparse
from aiogram import types
from aiogram.dispatcher import FSMContext

from main import dp

from database import *
from keyboards import *
from youngkb import main_young_menu_ikb
from states import *
from translations import _


@dp.message_handler(commands=['start'])
async def cd_start(message: types.Message):
    user_id = message.from_user.id
    ban = await check_ban_user(message)
    await insert_time_log(user_id)
    if not ban:
        await message.answer("–ü—Ä–∏–≤–µ—Ç!\n"
                             "–í—ã–±–µ—Ä–∏ —è–∑—ã–∫üëá\n"
                             "\n"
                             "Hello!\n"
                             "Choose languegeüëá",
                             reply_markup=choose_country_kb())
        await LanguageStateGroup.language.set()
        await create_lang(user_id)


@dp.message_handler(lambda message: not message.text == '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞'
                                    and not message.text == 'English'
                                    and not message.text == '–†—É—Å—Å–∫–∏–π'
                                    and not message.text == "O'zbek"
                                    and not message.text == '“ö–∞–∑–∞“õ'
                                    and not message.text == 'T√ºrk√ße',
                    state=LanguageStateGroup.language)
async def check_lang(message: types.Message):
    lang = await get_user_lang(message.from_user.id)
    await message.answer(_("–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç—É!", lang))


@dp.message_handler(state=LanguageStateGroup.language)
async def load_lang(message: types.Message, state: FSMContext):
    global lang_code, lang
    if message.text == '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞':
        lang_code = 'uk_UAH'
    elif message.text == 'English':
        lang_code = 'en_USD'
    elif message.text == '–†—É—Å—Å–∫–∏–π':
        lang_code = 'ru_RUB'
    elif message.text == "O'zbek":
        lang_code = 'uz_UZS'
    elif message.text == '“ö–∞–∑–∞“õ':
        lang_code = 'kz_KZT'
    elif message.text == 'T√ºrk√ße':
        lang_code = 'tr_TRY'
    async with state.proxy() as data:
        data['language'] = lang_code.split('_')[-2]
    currency = lang_code.split('_')[-1]
    await edit_lang(state, currency, user_id=message.from_user.id)
    lang = await get_user_lang(message.from_user.id)
    await message.answer(f"{_('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞', lang)}:\n"
                         f"üë∂Young player - {_('–¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –∏–≥—Ä–∞—é—Ç –ø—Ä–∞–∫–∏/–ø–∞–±–ª–∏–∫', lang)}.\n"
                         f"üë®PRO player - {_('–¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –∏–≥—Ä–∞–µ—Ç —Ç—É—Ä–Ω–∏—Ä—ã', lang)}.\n"
                         f"\n"
                         f"‚ùóÔ∏è{_('–í—ã –º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è', lang)}:\n"
                         f"üë∂Young player - {_('–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É', lang)} /player\n"
                         f"üë®PRO player - {_('–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É', lang)} /proplayer",
                         reply_markup=choose_type_akk())
    await LanguageStateGroup.next()


@dp.message_handler(lambda message: not message.text == 'üë®PRO player'
                                    and not message.text == 'üë∂Young player', state=LanguageStateGroup.profile)
async def check_profile(message: types.Message):
    lang = await get_user_lang(message.from_user.id)
    await message.answer(_("–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç—É!", lang))


@dp.message_handler(state=LanguageStateGroup.profile)
async def load_profile(message: types.Message, state: FSMContext):
    global profile_code
    lang = await get_user_lang(message.from_user.id)
    await set_new_click(message.from_user.id)
    if message.text == 'üë®PRO player':
        profile_code = 'pro'
        await message.answer(f"{_('–í–∞—à', lang)} ID: {message.chat.id}\n"
                             f"{_('–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç', lang)}?",
                             reply_markup=main_menu_kb(lang))
    elif message.text == 'üë∂Young player':
        await message.answer(f"{_('–í–∞—à', lang)} ID: {message.chat.id}\n"
                             f"{_('–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç', lang)}?",
                             reply_markup=main_young_menu_ikb(lang))
        profile_code = 'young'
    async with state.proxy() as data:
        data['profile'] = profile_code
    await update_profile(profile_code, message.from_user.id)
    await state.finish()


@dp.message_handler(commands=['getchatid'])
async def cd_get_chat_id(message: types.Message):
    await message.answer(f"ID –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞: {message.chat.id}")


# CheckUser
@dp.message_handler(commands=['checkuser'])
async def cd_check_user(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID —é–∑–µ—Ä–∞:")
    await CheckUserStatesGroup.user_id.set()


@dp.message_handler(lambda message: not message.text.isdigit(), state=CheckUserStatesGroup.user_id)
async def check_load_user_id(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID!")


@dp.message_handler(state=CheckUserStatesGroup.user_id)
async def load_check_user_id(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['user_id'] = message.text
    user = await get_user_lang(data['user_id'])
    if not user:
        await message.answer("–î–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç—É –≤ –±–∞–∑–µ!")
    else:
        await message.answer("–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ!")
    await state.finish()


@dp.message_handler(commands=['player'])
async def cd_player(message: types.Message):
    user_id = message.from_user.id
    lang = await get_user_lang(user_id)
    ban = await check_ban_user(message)
    await set_new_click(message.from_user.id)
    if not ban:
        await message.answer(f"{_('–í–∞—à', lang)} ID: {message.from_user.id}\n"
                             f"{_('–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç', lang)}?",
                             reply_markup=main_young_menu_ikb(lang))
        await update_profile("young", message.from_user.id)


@dp.message_handler(commands=['proplayer'])
async def cd_pro_player(message: types.Message):
    user_id = message.from_user.id
    lang = await get_user_lang(user_id)
    ban = await check_ban_user(message)
    await set_new_click(message.from_user.id)
    if not ban:
        await message.answer(f"{_('–¢–≤–æ–π', lang)} ID: {message.chat.id}\n"
                             f"{_('–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç', lang)}?",
                             reply_markup=main_menu_kb(lang))
        await update_profile("pro", message.from_user.id)


@dp.message_handler(commands=['finish'], state='*')
async def cd_finish(message: types.Message, state: FSMContext):
    lang = await get_user_lang(message.from_user.id)
    await set_new_click(message.from_user.id)
    await message.answer(f"{_('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞', lang)}:\n"
                         f"üë∂Young player - {_('–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É', lang)} /player\n"
                         f"üë®PRO player - {_('–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É', lang)} /proplayer")
    await state.finish()


# NEWS
@dp.message_handler(lambda message: message.text == "üî•NEWS")
async def news_text(message: types.Message):
    global index
    user_id = message.from_user.id
    lang = await get_user_lang(user_id)
    ban = await check_ban_user(message)
    await set_new_click(message.from_user.id)
    if not ban:
        all_news = await get_all_news()
        profile = await get_profile(message.from_user.id)
        if not all_news:
            await message.answer(_("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!", lang))
        else:
            news_kb = InlineKeyboardMarkup()
            for data in all_news:
                btn1 = InlineKeyboardButton(text=data[2],
                                            url=data[3])
                news_kb.add(btn1)
            if profile == 'pro':
                back = InlineKeyboardButton(f'üîô{_("–ù–∞–∑–∞–¥", lang)}', callback_data="back_main_menu")
                news_kb.add(back)
            elif profile == 'young':
                back = InlineKeyboardButton(f'üîô{_("–ù–∞–∑–∞–¥", lang)}', callback_data="back_young_main")
                news_kb.add(back)
            if len(all_news) < 2:
                await message.answer(_("–ù–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏:", lang),
                                     reply_markup=news_kb)
            else:
                await message.answer(_("–ù–∞—à–∏ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª—ã —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏:", lang),
                                     reply_markup=news_kb)


def is_valid_url(text):
    parsed = urlparse(text)
    return bool(parsed.scheme and parsed.netloc)


async def check_ban_user(message):
    user_id = message.from_user.id
    lang = await get_user_lang(user_id)
    block = await get_block_user(user_id)
    reason = await get_reason_user(user_id)
    ban_time = await get_ban_time_user(user_id)
    if block == 1:
        await message.answer(f"{_('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!', lang)}\n"
                             f"{_('–ü—Ä–∏—á–∏–Ω–∞', lang)}: {reason}\n"
                             f"{_('–°—Ä–æ–∫ –±–∞–Ω–∞', lang)}: {ban_time}\n"
                             f"{_('–í–∞—à', lang)} ID: {message.from_user.id}")
        return True


async def cb_check_ban_user(callback):
    user_id = callback.from_user.id
    lang = await get_user_lang(user_id)
    block = await get_block_user(user_id)
    reason = await get_reason_user(user_id)
    ban_time = await get_ban_time_user(user_id)
    if block == 1:
        await callback.message.answer(f"{_('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!', lang)}\n"
                                      f"{_('–ü—Ä–∏—á–∏–Ω–∞', lang)}: {reason}\n"
                                      f"{_('–°—Ä–æ–∫ –±–∞–Ω–∞', lang)}: {ban_time}\n"
                                      f"{_('–í–∞—à', lang)} ID: {user_id}")
        await callback.answer()
        return True


async def set_new_click(user_id):
    amount_click = await get_amount_click(user_id)
    if not amount_click:
        await update_click(1, user_id)
    else:
        new_amount_click = amount_click + 1
        await update_click(new_amount_click, user_id)
