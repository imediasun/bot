import asyncio
from aiogram import types
from aiogram.dispatcher import FSMContext

from config import admin_support_chat, ceo
from hendlers import check_ban_user, cb_check_ban_user, set_new_click
from main import dp, bot

from keyboards import *
from youngkb import info_from_bd, main_young_menu_ikb
from translations import _
from states import HelpStatesGroup, AnswerStatesGroup
from database.db import *

words_list = ["üí¨–ü–æ–¥–¥–µ—Ä–∂–∫–∞", "üí¨SUPPORT", "üí¨Destek", 'üí¨–ü—ñ–¥—Ç—Ä–∏–º–∫–∞', "üí¨“ö–æ–ª–¥–∞—É", "üí¨“ö—û–ª–ª–∞–±-“õ—É–≤–≤–∞—Ç–ª–∞—à"]

@dp.message_handler(lambda message: message.text in words_list)
async def all_text(message: types.Message):
    lang = await get_user_lang(message.from_user.id)
    ban = await check_ban_user(message)
    if not ban:
        await set_new_click(message.from_user.id)
        await message.answer(f"{_('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à –≤–æ–ø—Ä–æ—Å(–º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ)', lang)}:\n"
                             f"{_('–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: 8:00 - 00:00 MSK', lang)}",
                             reply_markup=info_from_bd(f"‚ùå{_('–û—Ç–º–µ–Ω–∏—Ç—å', lang)}"))
        await HelpStatesGroup.first_ques.set()



cb_words_list = ["ques", "back_main_menu"]

@dp.callback_query_handler(lambda callback : callback.data in cb_words_list)
async def all_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    ban = await cb_check_ban_user(callback)
    lang = await get_user_lang(user_id)
    if not ban:
        if callback.data == 'ques':
            await set_new_click(callback.from_user.id)
            await callback.message.answer(_("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å(–º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ):", lang),
                                          reply_markup=cancel_kb(lang))
            await HelpStatesGroup.first_ques.set()
            await callback.answer()
        elif callback.data == 'back_main_menu':
            await set_new_click(callback.from_user.id)
            await callback.message.answer(_("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", lang),
                                          reply_markup=main_menu_kb(lang))
            await callback.message.delete()
            await callback.answer()


# STATES HELP
# Questions
@dp.message_handler(content_types=['photo', 'text'], state=HelpStatesGroup.first_ques)
async def question1(message: types.Message, state: FSMContext):
    global chat_id_q, mess_id_ques
    lang = await get_user_lang(message.from_user.id)
    block = await get_block_user(message.from_user.id)
    try:
        chat_id_q = message.from_user.id
        lang_name = await get_lang_name(message.from_user.id)
        mess_id_ques = message.message_id
        if message.text == f'‚ùå{_("–û—Ç–º–µ–Ω–∏—Ç—å", lang)}':
            await set_new_click(message.from_user.id)
            await open_supp_chat(message.from_user.id)
            profile = await get_profile(message.from_user.id)
            if profile == 'pro':
                await message.answer(_("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", lang),
                                     reply_markup=main_menu_kb(lang))
            elif profile == 'young':
                await message.answer(_("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", lang),
                                     reply_markup=main_young_menu_ikb(lang))
            await state.finish()
        else:
            if block == 2:
                await message.answer(_("–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç—É!", lang),
                                     reply_markup=info_from_bd(f'üîô{_("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", lang)}'))
            else:
                await close_supp_chat(message.from_user.id)
                async with state.proxy() as data:
                    if (message.content_type == 'photo'):
                        data['text'] = message.caption
                    else:
                        data['text'] = message.text
                await bot.send_message(chat_id=chat_id_q,
                                       text=f"{_('–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ üí¨–ü–æ–¥–¥–µ—Ä–∂–∫—É!', lang)}\n"
                                            f"{_('–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç, –æ–∂–∏–¥–∞–π—Ç–µ...', lang)}",
                                       reply_markup=ReplyKeyboardRemove())
                if (message.content_type == 'photo'):
                    photo = message.photo[0].file_id
                    await bot.send_photo(chat_id=admin_support_chat,
                                         photo=photo,
                                         caption=f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username}\n"
                                                 f"ID: {message.from_user.id}\n"
                                                 f"–Ø–∑—ã–∫: {lang_name}\n"
                                                 f"\n"
                                                 f"–í–æ–ø—Ä–æ—Å: {data['text']}",
                                         reply_markup=admin_help_kb())
                else:
                    await bot.send_message(chat_id=admin_support_chat,
                                           text=f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username}\n"
                                                f"ID: {message.from_user.id}\n"
                                                f"–Ø–∑—ã–∫: {lang_name}\n"
                                                f"\n"
                                                f"–í–æ–ø—Ä–æ—Å: {data['text']}",
                                       reply_markup=admin_help_kb())
            await HelpStatesGroup.next()
    except:
        await bot.send_message(chat_id=ceo[0],
                               text="‚ùóÔ∏è–û—à–∏–±–∫–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")


@dp.message_handler(content_types=['text', 'photo'], state=HelpStatesGroup.second_ques)
async def question2(message : types.Message, state : FSMContext):
    global chat_id_q, mess_id_ques
    lang = await get_user_lang(message.from_user.id)
    block = await get_block_user(message.from_user.id)
    try:
        chat_id_q = message.from_user.id
        profile = await get_profile(chat_id_q)
        if message.text == f'‚ùå{_("–û—Ç–º–µ–Ω–∏—Ç—å", lang)}':
            # await bot.delete_message(chat_id=admin_support_chat, message_id=mess_id_ques)
            await set_new_click(message.from_user.id)
            await open_supp_chat(message.from_user.id)
            if profile == 'pro':
                await message.answer(_("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", lang),
                                     reply_markup=main_menu_kb(lang))
            elif profile == 'young':
                await message.answer(_("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", lang),
                                     reply_markup=main_young_menu_ikb(lang))
            await state.finish()
        elif message.text == f'‚ùå{_("–ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç", lang)}':
            await open_supp_chat(message.from_user.id)
            await bot.send_message(chat_id=ans_admin_id,
                                   text=f"‚ùå–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç!\n"
                                        f"ID: {chat_id_q}",
                                   reply_markup=info_from_bd("üîô–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
            if profile == 'pro':
                await bot.send_message(chat_id=chat_id_q,
                                       text=f"{_('–ë—ã–ª–∏ —Ä–∞–¥—ã –ø–æ–º–æ—á—å!', lang)}üòä\n"
                                            f"{_('–ñ–µ–ª–∞–µ–º —É—Å–ø–µ—Ö–æ–≤ –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!', lang)}üòò",
                                       reply_markup=main_menu_kb(lang))
            elif profile == 'young':
                await bot.send_message(chat_id=chat_id_q,
                                       text=f"{_('–ë—ã–ª–∏ —Ä–∞–¥—ã –ø–æ–º–æ—á—å!', lang)}üòä\n"
                                            f"{_('–ñ–µ–ª–∞–µ–º —É—Å–ø–µ—Ö–æ–≤ –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!', lang)}üòò",
                                       reply_markup=main_young_menu_ikb(lang))
            await state.finish()
        elif message.text == f'üîô{_("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", lang)}':
            await set_new_click(message.from_user.id)
            await open_supp_chat(message.from_user.id)
            if profile == 'pro':
                await message.answer(_("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", lang),
                                     reply_markup=main_menu_kb(lang))
            elif profile == 'young':
                await message.answer(_("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", lang),
                                     reply_markup=main_young_menu_ikb(lang))
            await state.finish()
        else:
            if block == 2:
                await message.answer(_("–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç—É!", lang),
                                     reply_markup=info_from_bd(f'üîô{_("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", lang)}'))
            else:
                async with state.proxy() as data:
                    if (message.content_type == 'photo'):
                        data['text'] = message.caption
                    else:
                        data['text'] = message.text
                if (message.content_type == 'photo'):
                    photo = message.photo[0].file_id
                    await bot.send_photo(chat_id=ans_admin_id,
                                         photo=photo,
                                         caption=data['text'],
                                         reply_markup=info_from_bd(f"‚ùå{_('–ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç', lang)}"))
                else:
                    await bot.send_message(chat_id=ans_admin_id,
                                           text=data['text'],
                                           reply_markup=info_from_bd(f"‚ùå{_('–ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç', lang)}"))
    except:
        await bot.send_message(chat_id=ceo[0],
                               text="‚ùóÔ∏è–û—à–∏–±–∫–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")




# Answers
@dp.callback_query_handler(text='answer')
async def admin_answer(callback: types.CallbackQuery):
    await bot.send_message(chat_id=callback.from_user.id,
                           text=f"ID: {chat_id_q}\n"
                                f"–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:",
                           reply_markup=admin_send_ans_ikb())
    await callback.answer()
    await asyncio.sleep(15)
    await callback.message.delete()


@dp.callback_query_handler(text='admin_send_ans')
async def admin_send_ans(callback : types.CallbackQuery):
    global ans_admin_id
    ans_admin_id = callback.from_user.id
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:",
                                  reply_markup=info_from_bd("‚ùå–ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç"))
    await AnswerStatesGroup.first_answer.set()
    await callback.answer()


@dp.callback_query_handler(text='ignore')
async def admin_ignore(callback: types.CallbackQuery):
    lang = await get_user_lang(callback.from_user.id)
    await callback.message.reply("–í—ã –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
    await bot.send_message(chat_id=chat_id_q,
                           text=_("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤–∞—à –≤–æ–ø—Ä–æ—Å –Ω–µ—è—Å–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ú–æ–∂–µ—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —É—Ç–æ—á–Ω–∏—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å?", lang),
                           reply_markup=ques_kb(lang))
    await callback.message.delete()
    await callback.answer()



@dp.message_handler(content_types=['photo', 'text'], state=AnswerStatesGroup.first_answer)
async def answer(message: types.Message, state: FSMContext):
    lang = await get_user_lang(chat_id_q)
    try:
        if message.text == '‚ùå–ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç':
            await close_supp_chat(chat_id_q)
            chat = await bot.get_chat(chat_id=chat_id_q)
            await message.answer(f"‚ùå–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{chat.username} –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
                                 f"ID: {chat_id_q}",
                                 reply_markup=main_menu_kb(lang))
            profile = await get_profile(chat_id_q)
            if profile == 'pro':
                await bot.send_message(chat_id=chat_id_q,
                                       text=f"{_('–ë—ã–ª–∏ —Ä–∞–¥—ã –ø–æ–º–æ—á—å!', lang)}üòä\n"
                                            f"{_('–ñ–µ–ª–∞–µ–º —É—Å–ø–µ—Ö–æ–≤ –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!', lang)}üòò",
                                       reply_markup=info_from_bd(f"üîô{_('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', lang)}"))
            elif profile == 'young':
                await bot.send_message(chat_id=chat_id_q,
                                       text=f"{_('–ë—ã–ª–∏ —Ä–∞–¥—ã –ø–æ–º–æ—á—å!', lang)}üòä\n"
                                            f"{_('–ñ–µ–ª–∞–µ–º —É—Å–ø–µ—Ö–æ–≤ –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!', lang)}üòò",
                                       reply_markup=info_from_bd(f"üîô{_('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', lang)}"))
            await state.finish()
        elif message.text == 'üîô–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            await message.answer(_("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", lang),
                                 reply_markup=main_menu_kb(lang))
            await state.finish()
        else:
            await open_supp_chat(message.from_user.id)
            async with state.proxy() as data:
                if (message.content_type == 'photo'):
                    data['text'] = message.caption
                else:
                    data['text'] = message.text
                await state.finish()
                if (message.content_type == 'photo'):
                    photo = message.photo[0].file_id
                    await bot.send_photo(chat_id=chat_id_q,
                                         photo=photo,
                                         caption=data['text'],
                                         reply_markup=info_from_bd(f"‚ùå{_('–ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç', lang)}"))
                else:
                    await bot.send_message(chat_id=chat_id_q,
                                           text=data['text'],
                                           reply_markup=info_from_bd(f"‚ùå{_('–ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç', lang)}"))
            await AnswerStatesGroup.next()
    except:
        await bot.send_message(chat_id=ceo[0],
                               text="‚ùóÔ∏è–û—à–∏–±–∫–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∞–¥–º–∏–Ω–∞!")


@dp.message_handler(content_types=['text', 'photo'], state=AnswerStatesGroup.second_answer)
async def second_answer(message : types.Message, state : FSMContext):
    lang = await get_user_lang(chat_id_q)
    try:
        if message.text == "‚ùå–ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç":
            await close_supp_chat(chat_id_q)
            chat = await bot.get_chat(chat_id=chat_id_q)
            await message.answer(f"‚ùå–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{chat.username} –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
                                 f"ID: {chat_id_q}",
                                 reply_markup=main_menu_kb(lang))
            await bot.send_message(chat_id=chat_id_q,
                                   text=f"{_('–ë—ã–ª–∏ —Ä–∞–¥—ã –ø–æ–º–æ—á—å!', lang)}üòä\n"
                                        f"{_('–ñ–µ–ª–∞–µ–º —É—Å–ø–µ—Ö–æ–≤ –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!', lang)}üòò",
                                   reply_markup=info_from_bd(f"üîô{_('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', lang)}"))
            # await HelpStatesGroup.first_ques.set
            await state.finish()
        elif message.text == 'üîô–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            await message.answer(_("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", lang),
                                 reply_markup=main_menu_kb(lang))
            await state.finish()
        else:
            async with state.proxy() as data:
                if (message.content_type == 'photo'):
                    data['text'] = message.caption
                else:
                    data['text'] = message.text
                await state.finish()
                if (message.content_type == 'photo'):
                    photo = message.photo[0].file_id
                    await bot.send_photo(chat_id=chat_id_q,
                                         photo=photo,
                                         caption=data['text'],
                                         reply_markup=info_from_bd(f"‚ùå{_('–ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç', lang)}"))
                else:
                    await bot.send_message(chat_id=chat_id_q,
                                           text=data['text'],
                                           reply_markup=info_from_bd(f"‚ùå{_('–ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç', lang)}"))
    except:
        await bot.send_message(chat_id=ceo[0],
                               text="‚ùóÔ∏è–û—à–∏–±–∫–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã a–¥–º–∏–Ω–∞!")